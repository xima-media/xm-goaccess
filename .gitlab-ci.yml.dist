#
# Die folgenden Placeholder innerhalb dieser Datei mÃ¼ssen ersetzt werden:
# - [IMAGE-NAME]
#

#-----------------------------------------------------------------------------------------------------------------------
# DEFAULT-DOCKER-IMAGE
#-----------------------------------------------------------------------------------------------------------------------
image: docker-os.artifactory.xima-services.de/[IMAGE-NAME]

#-----------------------------------------------------------------------------------------------------------------------
# CONFIGURATION
#-----------------------------------------------------------------------------------------------------------------------
variables:
  BUILD_DIR: ".Build"
  #
  # Prototype-Server
  #
  HOST_PROTOTYPE: ""
  APP_URL_PROTOTYPE: "https://${HOST_PROTOTYPE}/"
  SSH_HOST_PROTOTYPE: ""
  SSH_USER_PROTOTYPE: ""
  PATH_PROJECT_DIR_PROTOTYPE: "/var/www/${HOST_PROTOTYPE}/"
  #
  # TYPO3 Pipeline Configuration
  #
  PATH_TO_COMPOSER_FILE: "${CI_PROJECT_DIR}/htdocs/typo3/composer.json"
  SONAR_URL: "http://sonarqube.xima.ws"
  SONAR_ANALYSIS_MODE: "publish"
  SOURCE_DIR_TYPO3: "./htdocs/typo3"
  BUILD_DIR_TYPO3: ".Build/typo3"
  LOG_DIR: "${BUILD_DIR}/log"
  # {{ABBREVIATION}} Dev
  HOST_DEV: ""
  APP_URL_DEV: "http://${HOST_DEV}/"
  SSH_HOST_DEV: ""
  SSH_USER_DEV: ""
  PATH_PROJECT_DIR_DEV: "/var/www/html/typo3/"

#-----------------------------------------------------------------------------------------------------------------------
# STAGES
#-----------------------------------------------------------------------------------------------------------------------
# prepare:      prepares build environment
# assets:       builds assets
# build:        builds TYPO3 in docker environment for testing purpose
# test:         runs tests in docker environment
# analyse:      analyses code quality
# manual:       builds user manual
# backup:       performs backup on environment
# notify:       sends notification if deployment can starts manually
# deploy:       deploys application to environment

stages:
  - prepare
  - assets
  - build
  - test
  - analyse
  - manual
  - backup
  - notify
  - deploy

cache:
  key: ${CI_COMMIT_REF_SLUG}
  untracked: true
  paths:
    - ${BUILD_DIR_TYPO3}/vendor
    - ${LOG_DIR}

#-----------------------------------------------------------------------------------------------------------------------
# Anchors
#-----------------------------------------------------------------------------------------------------------------------

#
# Install SSH key in docker image
#
.install_ssh_key-before_script: &install_ssh_key-before_script
  before_script:
    - chmod +x ${CI_PROJECT_DIR}/deployment/gitlab-ci/install-ssh.sh
    - ${CI_PROJECT_DIR}/deployment/gitlab-ci/install-ssh.sh ${SSH_KEY} ${SSH_USER} ${SSH_HOST}
    - echo "${SSH_HOST} ${HOST_PREVIEW}" >> /etc/hosts

#--------------------------------------------------
# Pipeline - Prototypen Deployment
#--------------------------------------------------

#
# Composer dependencies for layoutBuilder
#
build:prototype:
  stage: build
  allow_failure: false
  only:
    - prototype
  artifacts:
    paths:
      - htdocs/layoutbuilder/vendor
    expire_in: 1 day
  cache:
    key: "vendor-$CI_JOB_NAME"
    paths:
      - htdocs/layoutbuilder/vendor
  script:
    # Build layoutBuilder
    - cd htdocs/layoutbuilder
    - ls -lisAh
    - composer install

#
# Build assets
#
assets:prototype:
  stage: assets
  allow_failure: false
  only:
    - prototype
  artifacts:
    paths:
      - htdocs/layoutbuilder/assets
    expire_in: 1 day
  cache:
    key: "vendor-$CI_JOB_NAME"
    paths:
      - htdocs/layoutbuilder/assets
  script:
    # Build assets and prepare export
    - cd htdocs
    - ls -lisAh
    - npm ci --no-optional
    - npm run build

#
# Deployment on prototype server
#
deploy:prototype:
  extends:
    - .install_ssh_key-before_script
  stage: deploy
  allow_failure: false
  dependencies:
    - assets:prototype
    - build:prototype
  only:
    - prototype
  environment:
    name: prototype
    url: ${APP_URL_PROTOTYPE}
  variables:
    SSH_USER: ${SSH_USER_PROTOTYPE}
    SSH_HOST: ${SSH_HOST_PROTOTYPE}
  script:
    # Move data to target system
    - >
      rsync --delete -paze "ssh -i /root/.ssh/${SSH_USER_PROTOTYPE}"
      --iconv=UTF-8 --chmod=D2775,F664
      --exclude-from deployment/rsync/prototype_exclude.txt htdocs/layoutbuilder/ ${SSH_USER_PROTOTYPE}@${SSH_HOST_PROTOTYPE}:${PATH_PROJECT_DIR_PROTOTYPE}


#-----------------------------------------------------------------------------------------------------------------------
# Pipeline - TYPO3 Deployment
#-----------------------------------------------------------------------------------------------------------------------

#
# Prepare build environment
#
prepare:environment:
  stage: prepare
  allow_failure: false
  variables:
    GIT_STRATEGY: none
  only:
    - /^release-.*$/
    - /^bugfix-.*$/
    - /^feature-.*$/
    - dev
    - stage
    - master
  script:
    - rm -rf ${BUILD_DIR}
    - rm -rf ${LOG_DIR}
    - mkdir -p ${BUILD_DIR}
    - mkdir -p ${LOG_DIR}

#
# Build assets
#
build:assets:
  stage: build
  allow_failure: false
  dependencies:
    - prepare:environment
  only:
    - /^release-.*$/
    - /^bugfix-.*$/
    - /^feature-.*$/
    - /^Phase2.*$/
    - dev
    - stage
    - master
  script:
    # Build assets
    - cd htdocs
    - ls -lash
    - npm ci
    - npm run build
    - npm run staging

#
# Scan Code Quality with SonarQube
#
code:quality:
  stage: analyse
  allow_failure: false
  only:
    # Only on default branch, because we have only SonarQube Community Edition.
    - dev
  image: ciricihq/gitlab-sonar-scanner:latest
  script:
    - ls -lash
    - ls -lash ${LOG_DIR}
    - gitlab-sonar-scanner

#
# Deployment on {{ABBREVIATION}} Dev
#
deploy:typo3-dev:
  extends:
    - .install_ssh_key-before_script
  stage: deploy
  allow_failure: false
  dependencies:
    - build:assets
  only:
    - dev
  environment:
    name: development
    url: ${APP_URL_DEV}
  variables:
    SSH_USER: ${SSH_USER_DEV}
    SSH_HOST: ${SSH_HOST_DEV}
  script:
    # Move data to target system
    - >
      rsync --delete -paze "ssh -i /root/.ssh/${SSH_USER_DEV}"
      --iconv=UTF-8
      --chmod=D2770,F660
      --exclude-from deployment/rsync/dev_exclude.txt
      htdocs/ ${SSH_USER_DEV}@${SSH_HOST_DEV}:${PATH_PROJECT_DIR_DEV}
    # Run ci:release
    - >
      ssh -i /root/.ssh/${SSH_USER_DEV} -t ${SSH_USER_DEV}@${SSH_HOST_DEV}
      "umask 0002
      && cd ${PATH_PROJECT_DIR_DEV}
      && composer install --no-dev
      && php bin/phing ci:release"
    # Notification
    - cd ${CI_PROJECT_DIR}/htdocs/
    - composer install
    - pip3 install -r vendor/xima/ci-tools/requirements.txt
    - >
      python3 vendor/xima/ci-tools/ms_teams_webhook_messenger.py
      --webhook ${MS_TEAMS_WEBHOOK}
      --url ${APP_URL_DEV}
      --app TYPO3
      --mode DEPLOYED
      --target '{{ABBREVIATION}} Dev'
